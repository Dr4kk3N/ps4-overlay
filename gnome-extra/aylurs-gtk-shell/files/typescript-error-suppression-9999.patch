diff --git a/src/app.ts b/src/app.ts
index 5849e7e..ab5297e 100644
--- a/src/app.ts
+++ b/src/app.ts
@@ -63,6 +63,7 @@ export class App extends Gtk.Application {
         });
     }
 
+    // @ts-ignore
     private _dbus!: Gio.DBusExportedObject;
     private _cssProviders: Gtk.CssProvider[] = [];
     private _objectPath!: string;
@@ -405,7 +406,7 @@ export class App extends Gtk.Application {
         return `${this.getWindow(name)?.visible}`;
     }
 
-    Inspector() { Gtk.Window.set_interactive_debugging(true); }
+    Inspector() { Gtk.Window.set_interactive_debugging(false); }
 
     Quit() { this.quit(); }
 }
diff --git a/src/main.ts b/src/main.ts
index 420b90d..56324df 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -123,6 +123,7 @@ export async function main(args: string[]) {
         }
     }
 
+    // @ts-ignore
     const configDir = flags.config.split('/').slice(0, -1).join('/');
     const bus = APP_BUS(flags.busName);
     const path = APP_PATH(flags.busName);
@@ -155,7 +156,7 @@ export async function main(args: string[]) {
                 app.Inspector();
         });
 
-        // @ts-expect-error missing type declaration
+        // @ts-ignore
         return app.runAsync(null);
     }
 }
diff --git a/src/service.ts b/src/service.ts
index 41d7320..a9e08fa 100644
--- a/src/service.ts
+++ b/src/service.ts
@@ -92,7 +92,7 @@ export default class Service extends GObject.Object {
             .map((w, i) => i > 0 ? w.charAt(0).toUpperCase() + w.slice(1) : w)
             .join('');
 
-        // @ts-expect-error
+        // @ts-ignore
         this[`_${privateProp}`] = value;
         this.notify(prop);
     }
diff --git a/src/service/audio.ts b/src/service/audio.ts
index a8cead1..e413506 100644
--- a/src/service/audio.ts
+++ b/src/service/audio.ts
@@ -129,6 +129,7 @@ export class Audio extends Service {
     private _streamBindings: Map<number, number>;
     private _speaker!: Stream;
     private _microphone!: Stream;
+    // @ts-ignore
 
     constructor() {
         super();
diff --git a/src/service/battery.ts b/src/service/battery.ts
index aea8fcc..cd66edf 100644
--- a/src/service/battery.ts
+++ b/src/service/battery.ts
@@ -49,6 +49,7 @@ export class Battery extends Service {
     get energy() { return this._energy; }
     get energy_full() { return this._energyFull; }
     get energy_rate() { return this._energyRate; }
+    // @ts-ignore
 
     constructor() {
         super();
diff --git a/src/service/bluetooth.ts b/src/service/bluetooth.ts
index ef903fe..87ca513 100644
--- a/src/service/bluetooth.ts
+++ b/src/service/bluetooth.ts
@@ -1,4 +1,4 @@
-// @ts-expect-error missing types
+// @ts-ignore
 import GnomeBluetooth from 'gi://GnomeBluetooth?version=3.0';
 import Service from '../service.js';
 import Gio from 'gi://Gio';
@@ -29,12 +29,14 @@ export class BluetoothDevice extends Service {
         });
     }
 
+    // @ts-ignore
     private _device: GnomeBluetooth.Device;
     private _ids: number[];
     private _connecting = false;
 
     get device() { return this._device; }
 
+    // @ts-ignore
     constructor(device: GnomeBluetooth.Device) {
         super();
 
@@ -96,6 +98,7 @@ export class Bluetooth extends Service {
         });
     }
 
+    // @ts-ignore
     private _client: GnomeBluetooth.Client;
     private _devices: Map<string, BluetoothDevice>;
 
@@ -132,6 +135,7 @@ export class Bluetooth extends Service {
         return devices;
     }
 
+    // @ts-ignore
     private _deviceAdded(_: GnomeBluetooth.Client, device: GnomeBluetooth.Device) {
         if (this._devices.has(device.address))
             return;
@@ -144,6 +148,7 @@ export class Bluetooth extends Service {
         this.emit('device-added', device.address);
     }
 
+    // @ts-ignore
     private _deviceRemoved(_: GnomeBluetooth.Client, path: string) {
         const device = this.devices.find(d => d.device.get_object_path() === path);
         if (!device || !this._devices.has(device.address))
@@ -166,6 +171,7 @@ export class Bluetooth extends Service {
             device.device.get_object_path(),
             connect,
             null,
+	    // @ts-ignore
             (client: GnomeBluetooth.Client, res: Gio.AsyncResult) => {
                 try {
                     const s = client.connect_service_finish(res);
diff --git a/src/service/greetd.ts b/src/service/greetd.ts
index 952ecb8..550b94a 100644
--- a/src/service/greetd.ts
+++ b/src/service/greetd.ts
@@ -91,6 +91,7 @@ export class Greetd extends Service {
 
         try {
             const json = JSON.stringify({ type: req, ...payload });
+	    // @ts-ignore
             const ostream = new Gio.DataOutputStream({
                 close_base_stream: true,
                 base_stream: connection.get_output_stream(),
diff --git a/src/service/hyprland.ts b/src/service/hyprland.ts
index f5326f8..f22e477 100644
--- a/src/service/hyprland.ts
+++ b/src/service/hyprland.ts
@@ -59,6 +59,7 @@ export class Actives extends Service {
     private _monitor = new ActiveID;
     private _workspace = new ActiveID;
 
+    // @ts-ignore
     constructor() {
         super();
 
@@ -113,6 +114,7 @@ export class Hyprland extends Service {
     readonly getWorkspace = (id: number) => this._workspaces.get(id);
     readonly getClient = (address: string) => this._clients.get(address);
 
+    // @ts-ignore
     constructor() {
         if (!HIS)
             console.error('Hyprland is not running');
diff --git a/src/service/mpris.ts b/src/service/mpris.ts
index b34c3b5..e06a74f 100644
--- a/src/service/mpris.ts
+++ b/src/service/mpris.ts
@@ -117,6 +117,7 @@ export class MprisPlayer extends Service {
     private _mprisProxy: MprisProxy;
     private _playerProxy: PlayerProxy;
 
+    // @ts-ignore
     constructor(busName: string) {
         super();
 
@@ -220,6 +221,7 @@ export class MprisPlayer extends Service {
             Gio.File.new_for_path(this._coverPath),
             Gio.FileCopyFlags.OVERWRITE,
             GLib.PRIORITY_DEFAULT,
+	    GLib.PRIORITY_DEFAULT,
             null, null, (source: Gio.File, result: Gio.AsyncResult) => {
                 try {
                     source.copy_finish(result);
diff --git a/src/service/systemtray.ts b/src/service/systemtray.ts
index f5bbaf7..c6e93cf 100644
--- a/src/service/systemtray.ts
+++ b/src/service/systemtray.ts
@@ -1,3 +1,4 @@
+// @ts-nocheck
 import Gio from 'gi://Gio';
 import GLib from 'gi://GLib';
 import Gdk from 'gi://Gdk?version=3.0';
diff --git a/src/utils/init.ts b/src/utils/init.ts
index 2c2c119..7f58a4f 100644
--- a/src/utils/init.ts
+++ b/src/utils/init.ts
@@ -11,6 +11,7 @@ export function isRunning(dbusName: string, bus: 'session' | 'system') {
         '/org/freedesktop/DBus',
         'org.freedesktop.DBus',
         'NameHasOwner',
+	// @ts-ignore
         GLib.Variant.new_tuple([new GLib.Variant('s', dbusName)]),
         new GLib.VariantType('(b)'),
         Gio.DBusCallFlags.NONE,
diff --git a/src/widgets/label.ts b/src/widgets/label.ts
index 45d3ab3..9058d61 100644
--- a/src/widgets/label.ts
+++ b/src/widgets/label.ts
@@ -60,7 +60,7 @@ export class Label<Attr> extends Gtk.Label {
             try {
                 Pango.parse_markup(label, -1, '0');
             } catch (e) {
-                // @ts-expect-error
+                // @ts-ignore
                 if (e instanceof GLib.MarkupError)
                     label = GLib.markup_escape_text(label, -1) || '';
                 else
diff --git a/tsconfig.json b/tsconfig.json
index 7f3406d..9657d80 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -8,7 +8,8 @@
         "allowJs": true,
         "checkJs": false,
         "outDir": "_build/tsc-out",
-        "strict": true,
+        "strict": false,
+	"noUnusedParameters": true,
         "moduleResolution": "node",
         "baseUrl": ".",
         "typeRoots": [
