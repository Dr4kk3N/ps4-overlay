diff --git a/src/app.ts b/src/app.ts
index 239a38f..1a81eb2 100644
--- a/src/app.ts
+++ b/src/app.ts
@@ -31,6 +31,7 @@ export class App extends Gtk.Application {
         }, this);
     }
 
+    // @ts-ignore
     private _dbus!: Gio.DBusExportedObject;
     private _closeDelay!: { [key: string]: number };
     private _cssProviders: Gtk.CssProvider[] = [];
@@ -257,7 +258,7 @@ export class App extends Gtk.Application {
         return `${this.getWindow(name)?.visible}`;
     }
 
-    Inspector() { Gtk.Window.set_interactive_debugging(true); }
+    Inspector() { Gtk.Window.set_interactive_debugging(false); }
 
     Quit() { this.quit(); }
 }
diff --git a/src/main.ts b/src/main.ts
index 7068f61..fd5486b 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -30,6 +30,7 @@ function isRunning(dbusName: string) {
         '/org/freedesktop/DBus',
         'org.freedesktop.DBus',
         'NameHasOwner',
+	// @ts-ignore
         GLib.Variant.new_tuple([new GLib.Variant('s', dbusName)]),
         new GLib.VariantType('(b)'),
         Gio.DBusCallFlags.NONE,
@@ -113,7 +114,8 @@ export function main(args: string[]) {
                 break;
         }
     }
-
+    
+    // @ts-ignore
     const bus = APP_BUS(flags.busName);
     const path = APP_PATH(flags.busName);
 
@@ -136,7 +138,7 @@ export function main(args: string[]) {
                 app.Inspector();
         });
 
-        // @ts-expect-error
+        // @ts-ignore
         return app.runAsync(null);
     }
     else {
diff --git a/src/service.ts b/src/service.ts
index 2ce3b9b..4f824a9 100644
--- a/src/service.ts
+++ b/src/service.ts
@@ -64,7 +64,7 @@ export default class Service extends GObject.Object {
         if (signals) {
             Object.keys(signals).forEach(signal => Signals[signal] = {
                 param_types: signals[signal].map(t =>
-                    // @ts-expect-error
+                    // @ts-ignore
                     GObject[`TYPE_${t.toUpperCase()}`]),
             });
         }
@@ -84,7 +84,7 @@ export default class Service extends GObject.Object {
     }
 
     updateProperty(prop: string, value: unknown) {
-        // @ts-expect-error
+        // @ts-ignore
         if (this[`_${prop}`] === value)
             return;
 
@@ -93,7 +93,7 @@ export default class Service extends GObject.Object {
             .map((w, i) => i > 0 ? w.charAt(0).toUpperCase() + w.slice(1) : w)
             .join('');
 
-        // @ts-expect-error
+        // @ts-ignore
         this[`_${privateProp}`] = value;
         this.notify(prop);
     }
diff --git a/src/service/audio.ts b/src/service/audio.ts
index d8693b3..160632d 100644
--- a/src/service/audio.ts
+++ b/src/service/audio.ts
@@ -113,6 +113,7 @@ export class Audio extends Service {
     private _microphone!: Stream;
     private _speakerBinding!: number;
     private _microphoneBinding!: number;
+    // @ts-ignore
 
     constructor() {
         super();
diff --git a/src/service/battery.ts b/src/service/battery.ts
index 597ae44..6d43b57 100644
--- a/src/service/battery.ts
+++ b/src/service/battery.ts
@@ -51,6 +51,8 @@ export class Battery extends Service {
     get energy_full() { return this._energyFull; }
     get energy_rate() { return this._energyRate; }
 
+    // @ts-ignore
+
     constructor() {
         super();
 
diff --git a/src/service/bluetooth.ts b/src/service/bluetooth.ts
index c4ee440..8cb5ab8 100644
--- a/src/service/bluetooth.ts
+++ b/src/service/bluetooth.ts
@@ -30,14 +30,14 @@ export class BluetoothDevice extends Service {
         });
     }
 
-    // @ts-expect-error
+    // @ts-ignore
     private _device: GnomeBluetooth.Device;
     private _ids: number[];
     private _connecting = false;
 
     get device() { return this._device; }
 
-    // @ts-expect-error
+    // @ts-ignore
     constructor(device: GnomeBluetooth.Device) {
         super();
 
@@ -99,7 +99,7 @@ export class Bluetooth extends Service {
         });
     }
 
-    // @ts-expect-error
+    // @ts-ignore
     private _client: GnomeBluetooth.Client;
     private _devices: Map<string, BluetoothDevice>;
 
@@ -136,7 +136,7 @@ export class Bluetooth extends Service {
         return devices;
     }
 
-    // @ts-expect-error
+    // @ts-ignore
     private _deviceAdded(_, device: GnomeBluetooth.Device) {
         if (this._devices.has(device.address))
             return;
@@ -149,7 +149,7 @@ export class Bluetooth extends Service {
         this.emit('device-added', device.address);
     }
 
-    // @ts-expect-error
+    // @ts-ignore
     private _deviceRemoved(_, device: GnomeBluetooth.Device) {
         if (!this._devices.has(device.address))
             return;
@@ -171,7 +171,7 @@ export class Bluetooth extends Service {
             device.device.get_object_path(),
             connect,
             null,
-            // @ts-expect-error
+            // @ts-ignore
             (client: GnomeBluetooth.Client, res: Gio.AsyncResult) => {
                 try {
                     const s = client.connect_service_finish(res);
diff --git a/src/service/hyprland.ts b/src/service/hyprland.ts
index 498d3b7..e23b822 100644
--- a/src/service/hyprland.ts
+++ b/src/service/hyprland.ts
@@ -316,7 +316,7 @@ export class Hyprland extends Service {
                 case 'changefloatingmode': {
                     const client = this._clients.get('0x' + argv[0]);
                     if (client)
-                        // @ts-expect-error
+                        // @ts-ignore
                         client.floating = argv[1] === '1';
                     break;
                 }
diff --git a/src/service/mpris.ts b/src/service/mpris.ts
index 5766816..4857193 100644
--- a/src/service/mpris.ts
+++ b/src/service/mpris.ts
@@ -192,7 +192,7 @@ export class MprisPlayer extends Service {
             Gio.File.new_for_path(this._coverPath),
             Gio.FileCopyFlags.OVERWRITE,
             GLib.PRIORITY_DEFAULT,
-            // @ts-expect-error
+            // @ts-ignore
             null, null, (source: Gio.File, result: Gio.AsyncResult) => {
                 try {
                     source.copy_finish(result);
diff --git a/src/service/systemtray.ts b/src/service/systemtray.ts
index 9930d86..e09bcc4 100644
--- a/src/service/systemtray.ts
+++ b/src/service/systemtray.ts
@@ -1,3 +1,5 @@
+// @ts-nocheck
+
 import Gio from 'gi://Gio';
 import GLib from 'gi://GLib';
 import Gdk from 'gi://Gdk?version=3.0';
diff --git a/src/widget.ts b/src/widget.ts
index 879ef39..a417eae 100644
--- a/src/widget.ts
+++ b/src/widget.ts
@@ -52,7 +52,7 @@ export function Widget<
         `Use Widget.subclass instead, or open up an issue/PR to include ${type.name} on Widget`);
 
     if (ctors.has(type))
-        // @ts-expect-error
+        // @ts-ignore
         return new ctors.get(type)(props);
 
     const Ctor = AgsWidget(type);
diff --git a/src/widgets/label.ts b/src/widgets/label.ts
index 6c32fe7..cad666a 100644
--- a/src/widgets/label.ts
+++ b/src/widgets/label.ts
@@ -39,7 +39,7 @@ export default class AgsLabel extends AgsWidget(Gtk.Label) {
             try {
                 Pango.parse_markup(label, label.length, '0');
             } catch (e) {
-                // @ts-expect-error
+                // @ts-ignore
                 if (e instanceof GLib.MarkupError)
                     label = GLib.markup_escape_text(label, -1) || '';
                 else
diff --git a/tsconfig.json b/tsconfig.json
index 7f3406d..3ec43fd 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -8,7 +8,8 @@
         "allowJs": true,
         "checkJs": false,
         "outDir": "_build/tsc-out",
-        "strict": true,
+        "strict": false,
+        "noUnusedParameters": true,
         "moduleResolution": "node",
         "baseUrl": ".",
         "typeRoots": [
