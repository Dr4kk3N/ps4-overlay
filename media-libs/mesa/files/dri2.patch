diff --git a/src/gallium/frontends/dri/dri2.c b/src/gallium/frontends/dri/dri2.c
index ad68f3b08c0..ab958626f52 100644
--- a/src/gallium/frontends/dri/dri2.c
+++ b/src/gallium/frontends/dri/dri2.c
@@ -292,15 +292,6 @@ dri_image_drawable_get_buffers(struct dri_drawable *drawable,
       case PIPE_FORMAT_R10G10B10A2_UNORM:
          image_format = __DRI_IMAGE_FORMAT_ABGR2101010;
          break;
-      case PIPE_FORMAT_R5G5B5A1_UNORM:
-         image_format = __DRI_IMAGE_FORMAT_ABGR1555;
-         break;
-      case PIPE_FORMAT_B4G4R4A4_UNORM:
-         image_format = __DRI_IMAGE_FORMAT_ARGB4444;
-         break;
-      case PIPE_FORMAT_R4G4B4A4_UNORM:
-         image_format = __DRI_IMAGE_FORMAT_ABGR4444;
-         break;
       default:
          image_format = __DRI_IMAGE_FORMAT_NONE;
          break;
@@ -858,28 +849,6 @@ dri2_update_tex_buffer(struct dri_drawable *drawable,
    /* no-op */
 }
 
-static const struct dri2_format_mapping r8_b8_g8_mapping = {
-   DRM_FORMAT_YVU420,
-   __DRI_IMAGE_FORMAT_NONE,
-   __DRI_IMAGE_COMPONENTS_Y_U_V,
-   PIPE_FORMAT_R8_B8_G8_420_UNORM,
-   3,
-   { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
-     { 2, 1, 1, __DRI_IMAGE_FORMAT_R8 },
-     { 1, 1, 1, __DRI_IMAGE_FORMAT_R8 } }
-};
-
-static const struct dri2_format_mapping r8_g8_b8_mapping = {
-   DRM_FORMAT_YUV420,
-   __DRI_IMAGE_FORMAT_NONE,
-   __DRI_IMAGE_COMPONENTS_Y_U_V,
-   PIPE_FORMAT_R8_G8_B8_420_UNORM,
-   3,
-   { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
-     { 1, 1, 1, __DRI_IMAGE_FORMAT_R8 },
-     { 2, 1, 1, __DRI_IMAGE_FORMAT_R8 } }
-};
-
 static const struct dri2_format_mapping r8_g8b8_mapping = {
    DRM_FORMAT_NV12,
    __DRI_IMAGE_FORMAT_NONE,
@@ -890,11 +859,11 @@ static const struct dri2_format_mapping r8_g8b8_mapping = {
      { 1, 1, 1, __DRI_IMAGE_FORMAT_GR88 } }
 };
 
-static const struct dri2_format_mapping r8_b8g8_mapping = {
+static const struct dri2_format_mapping g8_b8r8_mapping = {
    DRM_FORMAT_NV21,
    __DRI_IMAGE_FORMAT_NONE,
    __DRI_IMAGE_COMPONENTS_Y_UV,
-   PIPE_FORMAT_R8_B8G8_420_UNORM,
+   PIPE_FORMAT_G8_B8R8_420_UNORM,
    2,
    { { 0, 0, 0, __DRI_IMAGE_FORMAT_R8 },
      { 1, 1, 1, __DRI_IMAGE_FORMAT_GR88 } }
@@ -959,7 +928,7 @@ dri2_create_image_from_winsys(__DRIscreen *_screen,
                                     PIPE_BIND_SAMPLER_VIEW))
       tex_usage |= PIPE_BIND_SAMPLER_VIEW;
 
-   /* For NV12, see if we have support for sampling r8_g8b8 */
+   /* For NV12, see if we have support for sampling r8_b8g8 */
    if (!tex_usage && map->pipe_format == PIPE_FORMAT_NV12 &&
        pscreen->is_format_supported(pscreen, PIPE_FORMAT_R8_G8B8_420_UNORM,
                                     screen->target, 0, 0, PIPE_BIND_SAMPLER_VIEW)) {
@@ -967,29 +936,14 @@ dri2_create_image_from_winsys(__DRIscreen *_screen,
       tex_usage |= PIPE_BIND_SAMPLER_VIEW;
    }
 
-   /* For NV21, see if we have support for sampling r8_b8g8 */
+   /* For NV21, see if we have support for sampling g8_b8r8 */
    if (!tex_usage && map->pipe_format == PIPE_FORMAT_NV21 &&
-       pscreen->is_format_supported(pscreen, PIPE_FORMAT_R8_B8G8_420_UNORM,
+       pscreen->is_format_supported(pscreen, PIPE_FORMAT_G8_B8R8_420_UNORM,
                                     screen->target, 0, 0, PIPE_BIND_SAMPLER_VIEW)) {
-      map = &r8_b8g8_mapping;
+      map = &g8_b8r8_mapping;
       tex_usage |= PIPE_BIND_SAMPLER_VIEW;
    }
 
-   /* For YV12 and I420, see if we have support for sampling r8_b8_g8 or r8_g8_b8 */
-   if (!tex_usage && map->pipe_format == PIPE_FORMAT_IYUV) {
-      if (map->dri_fourcc == DRM_FORMAT_YUV420 &&
-          pscreen->is_format_supported(pscreen, PIPE_FORMAT_R8_G8_B8_420_UNORM,
-                                       screen->target, 0, 0, PIPE_BIND_SAMPLER_VIEW)) {
-         map = &r8_g8_b8_mapping;
-         tex_usage |= PIPE_BIND_SAMPLER_VIEW;
-      } else if (map->dri_fourcc == DRM_FORMAT_YVU420 &&
-          pscreen->is_format_supported(pscreen, PIPE_FORMAT_R8_B8_G8_420_UNORM,
-                                       screen->target, 0, 0, PIPE_BIND_SAMPLER_VIEW)) {
-         map = &r8_b8_g8_mapping;
-         tex_usage |= PIPE_BIND_SAMPLER_VIEW;
-      }
-   }
-
    /* If the hardware supports R8G8_R8B8 style subsampled RGB formats, these
     * can be used for YUYV and UYVY formats.
     */
@@ -2381,7 +2335,7 @@ dri2_init_screen(struct dri_screen *screen)
 
    (void) mtx_init(&screen->opencl_func_mutex, mtx_plain);
 
-   if (pipe_loader_drm_probe_fd(&screen->dev, screen->fd, false))
+   if (pipe_loader_drm_probe_fd(&screen->dev, screen->fd))
       pscreen = pipe_loader_create_screen(screen->dev);
 
    if (!pscreen)
@@ -2477,19 +2431,12 @@ fail:
    return NULL;
 }
 
-static int
-dri_query_compatible_render_only_device_fd(int kms_only_fd)
-{
-   return pipe_loader_get_compatible_render_capable_device_fd(kms_only_fd);
-}
-
 static const struct __DRImesaCoreExtensionRec mesaCoreExtension = {
    .base = { __DRI_MESA, 1 },
    .version_string = MESA_INTERFACE_VERSION_STRING,
    .createNewScreen = driCreateNewScreen2,
    .createContext = driCreateContextAttribs,
    .initScreen = dri2_init_screen,
-   .queryCompatibleRenderOnlyDeviceFd = dri_query_compatible_render_only_device_fd,
 };
 
 /* This is the table of extensions that the loader will dlsym() for. */
diff --git a/src/gallium/frontends/dri/dri_context.c b/src/gallium/frontends/dri/dri_context.c
index 2bdb83e89e9..1ffaded9174 100644
--- a/src/gallium/frontends/dri/dri_context.c
+++ b/src/gallium/frontends/dri/dri_context.c
@@ -169,7 +169,7 @@ dri_create_context(struct dri_screen *screen,
    if (debug_get_bool_option("MESA_NO_ERROR", false) ||
        driQueryOptionb(&screen->dev->option_cache, "mesa_no_error"))
 #if !defined(_WIN32)
-      if (__normal_user())
+      if (geteuid() == getuid())
 #endif
          attribs.flags |= ST_CONTEXT_FLAG_NO_ERROR;
 
diff --git a/src/gallium/frontends/dri/dri_drawable.h b/src/gallium/frontends/dri/dri_drawable.h
index fc767f6bdb6..eaa7c35fda0 100644
--- a/src/gallium/frontends/dri/dri_drawable.h
+++ b/src/gallium/frontends/dri/dri_drawable.h
@@ -84,14 +84,10 @@ struct dri_drawable
    unsigned int lastStamp;
    int w, h;
 
-   /* generic for swrast */
-   unsigned buffer_age;
-
    /* kopper */
    struct kopper_loader_info info;
    __DRIimage   *image; //texture_from_pixmap
    bool is_window;
-   bool has_modifiers;
 
    /* hooks filled in by dri2 & drisw */
    void (*allocate_textures)(struct dri_context *ctx,
diff --git a/src/gallium/frontends/dri/dri_helpers.c b/src/gallium/frontends/dri/dri_helpers.c
index 8608da084db..b4cd05500c0 100644
--- a/src/gallium/frontends/dri/dri_helpers.c
+++ b/src/gallium/frontends/dri/dri_helpers.c
@@ -505,15 +505,6 @@ static const struct dri2_format_mapping dri2_format_table[] = {
       { DRM_FORMAT_ARGB1555,      __DRI_IMAGE_FORMAT_ARGB1555,
         __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B5G5R5A1_UNORM, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_ARGB1555 } } },
-      { DRM_FORMAT_ABGR1555,      __DRI_IMAGE_FORMAT_ABGR1555,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R5G5B5A1_UNORM, 1,
-        { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR1555 } } },
-      { DRM_FORMAT_ARGB4444,      __DRI_IMAGE_FORMAT_ARGB4444,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_B4G4R4A4_UNORM, 1,
-        { { 0, 0, 0, __DRI_IMAGE_FORMAT_ARGB4444 } } },
-      { DRM_FORMAT_ABGR4444,      __DRI_IMAGE_FORMAT_ABGR4444,
-        __DRI_IMAGE_COMPONENTS_RGBA,      PIPE_FORMAT_R4G4B4A4_UNORM, 1,
-        { { 0, 0, 0, __DRI_IMAGE_FORMAT_ABGR4444 } } },
       { DRM_FORMAT_RGB565,        __DRI_IMAGE_FORMAT_RGB565,
         __DRI_IMAGE_COMPONENTS_RGB,       PIPE_FORMAT_B5G6R5_UNORM, 1,
         { { 0, 0, 0, __DRI_IMAGE_FORMAT_RGB565 } } },
diff --git a/src/gallium/frontends/dri/dri_screen.c b/src/gallium/frontends/dri/dri_screen.c
index a1fc9f0a30b..ee7c1db2164 100644
--- a/src/gallium/frontends/dri/dri_screen.c
+++ b/src/gallium/frontends/dri/dri_screen.c
@@ -123,7 +123,13 @@ dri_loader_get_cap(struct dri_screen *screen, enum dri_loader_cap cap)
  * \param stencil_bits  Array of stencil buffer sizes to be exposed.
  * \param num_depth_stencil_bits  Number of entries in both \c depth_bits and
  *                      \c stencil_bits.
- * \param db_modes      Array of double buffer modes.
+ * \param db_modes      Array of buffer swap modes.  If an element has a
+ *                      value of \c __DRI_ATTRIB_SWAP_NONE, then it
+ *                      represents a single-buffered mode.  Other valid
+ *                      values are \c __DRI_ATTRIB_SWAP_EXCHANGE,
+ *                      \c __DRI_ATTRIB_SWAP_COPY, and \c __DRI_ATTRIB_SWAP_UNDEFINED.
+ *                      They represent the respective GLX values as in
+ *                      the GLX_OML_swap_method extension spec.
  * \param num_db_modes  Number of entries in \c db_modes.
  * \param msaa_samples  Array of msaa sample count. 0 represents a visual
  *                      without a multisample buffer.
@@ -143,7 +149,7 @@ static __DRIconfig **
 driCreateConfigs(mesa_format format,
                  const uint8_t * depth_bits, const uint8_t * stencil_bits,
                  unsigned num_depth_stencil_bits,
-                 const bool *db_modes, unsigned num_db_modes,
+                 const GLenum * db_modes, unsigned num_db_modes,
                  const uint8_t * msaa_samples, unsigned num_msaa_modes,
                  GLboolean enable_accum, GLboolean color_depth_match)
 {
@@ -184,18 +190,6 @@ driCreateConfigs(mesa_format format,
       /* MESA_FORMAT_RGBA_FLOAT16 */
       {{ 0, 0, 0, 0},
        { 0, 16, 32, 48 }},
-      /* MESA_FORMAT_B5G5R5A1_UNORM */
-      {{ 0x00007C00, 0x000003E0, 0x0000001F, 0x00008000 },
-       { 10, 5, 0, 15 }},
-      /* MESA_FORMAT_R5G5B5A1_UNORM */
-      {{ 0x0000001F, 0x000003E0, 0x00007C00, 0x00008000 },
-       { 0, 5, 10, 15 }},
-      /* MESA_FORMAT_B4G4R4A4_UNORM */
-      {{ 0x00000F00, 0x000000F0, 0x0000000F, 0x0000F000 },
-       { 8, 4, 0, 12 }},
-      /* MESA_FORMAT_R4G4B4A4_UNORM */
-      {{ 0x0000000F, 0x000000F0, 0x00000F00, 0x0000F000 },
-       { 0, 4, 8, 12 }},
    };
 
    const uint32_t * masks;
@@ -261,22 +255,6 @@ driCreateConfigs(mesa_format format,
       masks = format_table[8].masks;
       shifts = format_table[8].shifts;
       break;
-   case MESA_FORMAT_B5G5R5A1_UNORM:
-      masks = format_table[11].masks;
-      shifts = format_table[11].shifts;
-      break;
-   case MESA_FORMAT_R5G5B5A1_UNORM:
-      masks = format_table[12].masks;
-      shifts = format_table[12].shifts;
-      break;
-   case MESA_FORMAT_B4G4R4A4_UNORM:
-      masks = format_table[13].masks;
-      shifts = format_table[13].shifts;
-      break;
-   case MESA_FORMAT_R4G4B4A4_UNORM:
-      masks = format_table[14].masks;
-      shifts = format_table[14].shifts;
-      break;
    default:
       fprintf(stderr, "[%s:%u] Unknown framebuffer type %s (%d).\n",
               __func__, __LINE__,
@@ -432,11 +417,23 @@ dri_fill_in_modes(struct dri_screen *screen)
 
       /* Required by Android, for HAL_PIXEL_FORMAT_RGBX_8888. */
       MESA_FORMAT_R8G8B8X8_SRGB,
-
-      MESA_FORMAT_B5G5R5A1_UNORM,
-      MESA_FORMAT_R5G5B5A1_UNORM,
-      MESA_FORMAT_B4G4R4A4_UNORM,
-      MESA_FORMAT_R4G4B4A4_UNORM,
+   };
+   static const enum pipe_format pipe_formats[] = {
+      PIPE_FORMAT_B10G10R10A2_UNORM,
+      PIPE_FORMAT_B10G10R10X2_UNORM,
+      PIPE_FORMAT_R10G10B10A2_UNORM,
+      PIPE_FORMAT_R10G10B10X2_UNORM,
+      PIPE_FORMAT_BGRA8888_UNORM,
+      PIPE_FORMAT_BGRX8888_UNORM,
+      PIPE_FORMAT_BGRA8888_SRGB,
+      PIPE_FORMAT_BGRX8888_SRGB,
+      PIPE_FORMAT_B5G6R5_UNORM,
+      PIPE_FORMAT_R16G16B16A16_FLOAT,
+      PIPE_FORMAT_R16G16B16X16_FLOAT,
+      PIPE_FORMAT_RGBA8888_UNORM,
+      PIPE_FORMAT_RGBX8888_UNORM,
+      PIPE_FORMAT_RGBA8888_SRGB,
+      PIPE_FORMAT_RGBX8888_SRGB,
    };
    __DRIconfig **configs = NULL;
    uint8_t depth_bits_array[5];
@@ -450,7 +447,10 @@ dri_fill_in_modes(struct dri_screen *screen)
    bool allow_rgb10;
    bool allow_fp16;
 
-   static const bool db_modes[] = { false, true };
+   static const GLenum back_buffer_modes[] = {
+      __DRI_ATTRIB_SWAP_NONE, __DRI_ATTRIB_SWAP_UNDEFINED,
+      __DRI_ATTRIB_SWAP_COPY
+   };
 
    if (driQueryOptionb(&screen->dev->option_cache, "always_have_depth_buffer")) {
       /* all visuals will have a depth buffer */
@@ -507,36 +507,35 @@ dri_fill_in_modes(struct dri_screen *screen)
    mixed_color_depth =
       p_screen->get_param(p_screen, PIPE_CAP_MIXED_COLOR_DEPTH_BITS);
 
+   assert(ARRAY_SIZE(mesa_formats) == ARRAY_SIZE(pipe_formats));
+
    /* Add configs. */
-   for (unsigned f = 0; f < ARRAY_SIZE(mesa_formats); f++) {
-      mesa_format format = mesa_formats[f];
+   for (unsigned format = 0; format < ARRAY_SIZE(mesa_formats); format++) {
       __DRIconfig **new_configs = NULL;
       unsigned num_msaa_modes = 0; /* includes a single-sample mode */
       uint8_t msaa_modes[MSAA_VISUAL_MAX_SAMPLES];
 
       /* Expose only BGRA ordering if the loader doesn't support RGBA ordering. */
       if (!allow_rgba_ordering &&
-          (format == MESA_FORMAT_R8G8B8A8_UNORM ||
-           format == MESA_FORMAT_R8G8B8X8_UNORM ||
-           format == MESA_FORMAT_R8G8B8A8_SRGB  ||
-           format == MESA_FORMAT_R8G8B8X8_SRGB  ||
-           format == MESA_FORMAT_R5G5B5A1_UNORM ||
-           format == MESA_FORMAT_R4G4B4A4_UNORM))
+          (mesa_formats[format] == MESA_FORMAT_R8G8B8A8_UNORM ||
+           mesa_formats[format] == MESA_FORMAT_R8G8B8X8_UNORM ||
+           mesa_formats[format] == MESA_FORMAT_R8G8B8A8_SRGB  ||
+           mesa_formats[format] == MESA_FORMAT_R8G8B8X8_SRGB))
          continue;
 
       if (!allow_rgb10 &&
-          (format == MESA_FORMAT_B10G10R10A2_UNORM ||
-           format == MESA_FORMAT_B10G10R10X2_UNORM ||
-           format == MESA_FORMAT_R10G10B10A2_UNORM ||
-           format == MESA_FORMAT_R10G10B10X2_UNORM))
+          (mesa_formats[format] == MESA_FORMAT_B10G10R10A2_UNORM ||
+           mesa_formats[format] == MESA_FORMAT_B10G10R10X2_UNORM ||
+           mesa_formats[format] == MESA_FORMAT_R10G10B10A2_UNORM ||
+           mesa_formats[format] == MESA_FORMAT_R10G10B10X2_UNORM))
          continue;
 
       if (!allow_fp16 &&
-          (format == MESA_FORMAT_RGBA_FLOAT16 ||
-           format == MESA_FORMAT_RGBX_FLOAT16))
+          (mesa_formats[format] == MESA_FORMAT_RGBA_FLOAT16 ||
+           mesa_formats[format] == MESA_FORMAT_RGBX_FLOAT16))
          continue;
 
-      if (!p_screen->is_format_supported(p_screen, format,
+      if (!p_screen->is_format_supported(p_screen, pipe_formats[format],
                                          PIPE_TEXTURE_2D, 0, 0,
                                          PIPE_BIND_RENDER_TARGET |
                                          PIPE_BIND_DISPLAY_TARGET))
@@ -545,7 +544,7 @@ dri_fill_in_modes(struct dri_screen *screen)
       for (i = 1; i <= MSAA_VISUAL_MAX_SAMPLES; i++) {
          int samples = i > 1 ? i : 0;
 
-         if (p_screen->is_format_supported(p_screen, format,
+         if (p_screen->is_format_supported(p_screen, pipe_formats[format],
                                            PIPE_TEXTURE_2D, samples, samples,
                                            PIPE_BIND_RENDER_TARGET)) {
             msaa_modes[num_msaa_modes++] = samples;
@@ -554,20 +553,20 @@ dri_fill_in_modes(struct dri_screen *screen)
 
       if (num_msaa_modes) {
          /* Single-sample configs with an accumulation buffer. */
-         new_configs = driCreateConfigs(format,
+         new_configs = driCreateConfigs(mesa_formats[format],
                                         depth_bits_array, stencil_bits_array,
-                                        depth_buffer_factor,
-                                        db_modes, ARRAY_SIZE(db_modes),
+                                        depth_buffer_factor, back_buffer_modes,
+                                        ARRAY_SIZE(back_buffer_modes),
                                         msaa_modes, 1,
                                         GL_TRUE, !mixed_color_depth);
          configs = driConcatConfigs(configs, new_configs);
 
          /* Multi-sample configs without an accumulation buffer. */
          if (num_msaa_modes > 1) {
-            new_configs = driCreateConfigs(format,
+            new_configs = driCreateConfigs(mesa_formats[format],
                                            depth_bits_array, stencil_bits_array,
-                                           depth_buffer_factor,
-                                           db_modes, ARRAY_SIZE(db_modes),
+                                           depth_buffer_factor, back_buffer_modes,
+                                           ARRAY_SIZE(back_buffer_modes),
                                            msaa_modes+1, num_msaa_modes-1,
                                            GL_FALSE, !mixed_color_depth);
             configs = driConcatConfigs(configs, new_configs);
@@ -657,38 +656,6 @@ dri_fill_st_visual(struct st_visual *stvis,
       stvis->color_format = PIPE_FORMAT_B5G6R5_UNORM;
       break;
 
-   case 0x00007C00:
-      assert(!mode->sRGBCapable);
-      if (mode->alphaMask)
-         stvis->color_format = PIPE_FORMAT_B5G5R5A1_UNORM;
-      else
-         stvis->color_format = PIPE_FORMAT_B5G5R5X1_UNORM;
-      break;
-
-   case 0x0000001F:
-      assert(!mode->sRGBCapable);
-      if (mode->alphaMask)
-         stvis->color_format = PIPE_FORMAT_R5G5B5A1_UNORM;
-      else
-         stvis->color_format = PIPE_FORMAT_R5G5B5X1_UNORM;
-      break;
-
-   case 0x00000F00:
-      assert(!mode->sRGBCapable);
-      if (mode->alphaMask)
-         stvis->color_format = PIPE_FORMAT_B4G4R4A4_UNORM;
-      else
-         stvis->color_format = PIPE_FORMAT_B4G4R4X4_UNORM;
-      break;
-
-   case 0x0000000F:
-      assert(!mode->sRGBCapable);
-      if (mode->alphaMask)
-         stvis->color_format = PIPE_FORMAT_R4G4B4A4_UNORM;
-      else
-         stvis->color_format = PIPE_FORMAT_R4G4B4X4_UNORM;
-      break;
-
    default:
       assert(!"unsupported visual: invalid red mask");
       return;
diff --git a/src/gallium/frontends/dri/dri_util.c b/src/gallium/frontends/dri/dri_util.c
index fc84abe16b8..9dcd20b4209 100644
--- a/src/gallium/frontends/dri/dri_util.c
+++ b/src/gallium/frontends/dri/dri_util.c
@@ -751,7 +745,6 @@ driCreateNewDrawable(__DRIscreen *psp,
     struct dri_screen *screen = dri_screen(psp);
     struct dri_drawable *drawable =
        screen->create_drawable(screen, &config->modes, GL_FALSE, data);
-   drawable->buffer_age = 0;
 
     return opaque_dri_drawable(drawable);
 }
@@ -856,13 +849,6 @@ driSwapBuffers(__DRIdrawable *pdp)
    drawable->swap_buffers(drawable);
 }
 
-static int
-driSWRastQueryBufferAge(__DRIdrawable *pdp)
-{
-   struct dri_drawable *drawable = dri_drawable(pdp);
-   return drawable->buffer_age;
-}
-
 /** Core interface */
 const __DRIcoreExtension driCoreExtension = {
     .base = { __DRI_CORE, 2 },
@@ -923,7 +909,6 @@ const __DRIswrastExtension driSWRastExtension = {
     .createNewContextForAPI     = driCreateNewContextForAPI,
     .createContextAttribs       = driCreateContextAttribs,
     .createNewScreen2           = driSWRastCreateNewScreen2,
-    .queryBufferAge             = driSWRastQueryBufferAge,
 };
 
 const __DRI2configQueryExtension dri2ConfigQueryExtension = {
@@ -958,11 +943,6 @@ static const struct {
       .mesa_format     =        MESA_FORMAT_B5G5R5A1_UNORM,
       .internal_format =        GL_RGB5_A1,
    },
-   {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR1555,
-      .mesa_format     =        MESA_FORMAT_R5G5B5A1_UNORM,
-      .internal_format =        GL_RGB5_A1,
-   },
    {
       .image_format    = __DRI_IMAGE_FORMAT_XRGB8888,
       .mesa_format     =        MESA_FORMAT_B8G8R8X8_UNORM,
@@ -1082,16 +1062,6 @@ static const struct {
       .internal_format =        GL_RG16,
    },
 #endif
-   {
-      .image_format    = __DRI_IMAGE_FORMAT_ARGB4444,
-      .mesa_format     =        MESA_FORMAT_B4G4R4A4_UNORM,
-      .internal_format =        GL_RGBA4,
-   },
-   {
-      .image_format    = __DRI_IMAGE_FORMAT_ABGR4444,
-      .mesa_format     =        MESA_FORMAT_R4G4B4A4_UNORM,
-      .internal_format =        GL_RGBA4,
-   },
 };
 
 uint32_t
diff --git a/src/gallium/frontends/dri/drisw.c b/src/gallium/frontends/dri/drisw.c
index 460014baf1c..7c6a75a228b 100644
--- a/src/gallium/frontends/dri/drisw.c
+++ b/src/gallium/frontends/dri/drisw.c
@@ -256,7 +256,6 @@ drisw_swap_buffers(struct dri_drawable *drawable)
                                         fence, OS_TIMEOUT_INFINITE);
       screen->base.screen->fence_reference(screen->base.screen, &fence, NULL);
       drisw_copy_to_front(ctx->st->pipe, drawable, ptex);
-      drawable->buffer_age = 1;
 
       /* TODO: remove this if the framebuffer state doesn't change. */
       st_context_invalidate_state(ctx->st, ST_INVALIDATE_FB_STATE);
@@ -371,7 +370,6 @@ drisw_allocate_textures(struct dri_context *stctx,
          pipe_resource_reference(&drawable->textures[i], NULL);
          pipe_resource_reference(&drawable->msaa_textures[i], NULL);
       }
-      drawable->buffer_age = 0;
    }
 
    memset(&templ, 0, sizeof(templ));
diff --git a/src/gallium/frontends/dri/kopper.c b/src/gallium/frontends/dri/kopper.c
index 70b9980b6f5..514be0e3bcc 100644
--- a/src/gallium/frontends/dri/kopper.c
+++ b/src/gallium/frontends/dri/kopper.c
@@ -126,7 +126,7 @@ kopper_init_screen(struct dri_screen *screen)
 
    bool success;
    if (screen->fd != -1)
-      success = pipe_loader_drm_probe_fd(&screen->dev, screen->fd, false);
+      success = pipe_loader_drm_probe_fd(&screen->dev, screen->fd);
    else
       success = pipe_loader_vk_probe_dri(&screen->dev, NULL);
 
@@ -191,20 +191,11 @@ get_dri_format(enum pipe_format pf)
    case PIPE_FORMAT_R16G16B16X16_FLOAT:
       image_format = __DRI_IMAGE_FORMAT_XBGR16161616F;
       break;
-   case PIPE_FORMAT_B5G6R5_UNORM:
-      image_format = __DRI_IMAGE_FORMAT_RGB565;
-      break;
    case PIPE_FORMAT_B5G5R5A1_UNORM:
       image_format = __DRI_IMAGE_FORMAT_ARGB1555;
       break;
-   case PIPE_FORMAT_R5G5B5A1_UNORM:
-      image_format = __DRI_IMAGE_FORMAT_ABGR1555;
-      break;
-   case PIPE_FORMAT_B4G4R4A4_UNORM:
-      image_format = __DRI_IMAGE_FORMAT_ARGB4444;
-      break;
-   case PIPE_FORMAT_R4G4B4A4_UNORM:
-      image_format = __DRI_IMAGE_FORMAT_ABGR4444;
+   case PIPE_FORMAT_B5G6R5_UNORM:
+      image_format = __DRI_IMAGE_FORMAT_RGB565;
       break;
    case PIPE_FORMAT_BGRX8888_UNORM:
       image_format = __DRI_IMAGE_FORMAT_XRGB8888;
@@ -262,10 +253,6 @@ image_format_to_fourcc(int format)
    case __DRI_IMAGE_FORMAT_ABGR2101010: return DRM_FORMAT_ABGR2101010;
    case __DRI_IMAGE_FORMAT_XBGR16161616F: return DRM_FORMAT_XBGR16161616F;
    case __DRI_IMAGE_FORMAT_ABGR16161616F: return DRM_FORMAT_ABGR16161616F;
-   case __DRI_IMAGE_FORMAT_ARGB1555: return DRM_FORMAT_ARGB1555;
-   case __DRI_IMAGE_FORMAT_ABGR1555: return DRM_FORMAT_ABGR1555;
-   case __DRI_IMAGE_FORMAT_ARGB4444: return DRM_FORMAT_ARGB4444;
-   case __DRI_IMAGE_FORMAT_ABGR4444: return DRM_FORMAT_ABGR4444;
    }
    return 0;
 }
@@ -408,7 +395,7 @@ kopper_get_pixmap_buffer(struct dri_drawable *drawable,
    struct dri_screen *screen = drawable->screen;
 
 #ifdef HAVE_DRI3_MODIFIERS
-   if (drawable->has_modifiers) {
+   if (screen->has_modifiers) {
       xcb_dri3_buffers_from_pixmap_cookie_t bps_cookie;
       xcb_dri3_buffers_from_pixmap_reply_t *bps_reply;
       xcb_generic_error_t *error;
@@ -567,7 +554,8 @@ XXX do this once swapinterval is hooked up
    /* pixmaps always have front buffers.
     * Exchange swaps also mandate fake front buffers.
     */
-   if (draw->type != LOADER_DRI3_DRAWABLE_WINDOW)
+   if (draw->type != LOADER_DRI3_DRAWABLE_WINDOW ||
+       draw->swap_method == __DRI_ATTRIB_SWAP_EXCHANGE)
       buffer_mask |= __DRI_IMAGE_BUFFER_FRONT;
 #endif
 
@@ -905,15 +893,13 @@ static __DRIdrawable *
 kopperCreateNewDrawable(__DRIscreen *psp,
                         const __DRIconfig *config,
                         void *data,
-                        __DRIkopperDrawableInfo *info)
+                        int is_pixmap)
 {
     assert(data != NULL);
 
     struct dri_screen *screen = dri_screen(psp);
     struct dri_drawable *drawable =
-       screen->create_drawable(screen, &config->modes, info->is_pixmap, data);
-   if (drawable)
-      drawable->has_modifiers = screen->has_modifiers && info->multiplanes_available;
+       screen->create_drawable(screen, &config->modes, is_pixmap, data);
 
     return opaque_dri_drawable(drawable);
 }
diff --git a/src/gallium/frontends/dri/meson.build b/src/gallium/frontends/dri/meson.build
index 0713135d7db..6009322edd9 100644
--- a/src/gallium/frontends/dri/meson.build
+++ b/src/gallium/frontends/dri/meson.build
@@ -52,7 +52,7 @@ if with_gallium_zink and not with_platform_android
     libdri_c_args += '-DKOPPER_LIB_NAMES="libEGL and libGLX"'
   endif
   files_libdri += files('kopper.c')
-  deps_for_libdri += vulkan_wsi_deps
+  deps_for_libdri += idep_vulkan_wsi_defines
 endif
 
 if with_gallium_softpipe
